/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/

#property indicator_chart_window

extern bool Sound.Alert = FALSE;
extern string Sound.File = "startgun.wav";
extern int myChartX = 10;
extern int myChartY = 100;
int g_corner_96 = 1;
extern string myFont = "Arial Black";
extern int myFontSize = 10;
string gs_112;
extern int myPeriod = 5;
extern double myThreshold = 20.0;
extern int iArrow = 254;
extern int CountBars = 500;
extern bool Draw_Closes = TRUE;
extern color colorHD = Orange;
extern color colorBUY = Lime;
extern color colorSELL = Red;
extern color colorSHORT = Crimson;
extern color colorCOVER = Green;
extern color colorWAIT = Gray;
string gs_168;
string gs_176;
string gs_184;
int gi_192;
int gi_196;
int gi_unused_200;
int gi_unused_204;
int gi_208;
int g_index_212;
double gd_216;
double g_spread_224;
string gsa_232[15];
string gsa_236[15];
string gs_dummy_240;
string gs_dummy_248;
string gs_dummy_256;
string gs_dummy_264;
int gi_unused_272 = 16711680;
string gs_unused_276 = "Scalp Trading:";
int gi_unused_284 = 0;
int gia_unused_288[];
string gs_292;
int g_arr_size_300;
int g_str_len_304;
string gsa_308[];
string gsa_unused_312[];
int gia_unused_316[];
string gs_unused_320 = "";
string gs_unused_328 = "Terminal";
string gs_dummy_336;
string gs_dummy_344;
string gs_352;
string gs_dummy_360;
string gs_dummy_368;
string gs_dummy_376;
string gs_dummy_384;
string gs_dummy_392;
string g_text_400;
string g_text_408;
string g_text_416;
color g_color_424;
color g_color_428;
color g_color_432;
int g_color_436;
string gs_unused_440 = "Ø";
string gs_unused_448 = "Ù";
string gs_unused_456 = "Ú";
double g_ihigh_464;
double g_ilow_472;
double g_iclose_480;
double g_iopen_488;
double g_ihigh_496;
double gd_504;
int gi_unused_512 = 12;
int gi_516;
int gi_520;
int gi_524;
int gi_528;
int gi_532;
int gi_unused_536;
int gi_unused_540;
int gi_unused_544;
int gi_unused_548;
string gs_552;
string gs_560;
double g_iclose_568;
double g_ilow_576;
double g_ihigh_584;
double gd_592;
double gd_600;
datetime g_time_608;
bool gi_612 = TRUE;
bool gi_unused_616 = FALSE;
bool gi_unused_620 = FALSE;
bool gi_unused_624 = FALSE;
bool gi_unused_628 = FALSE;

int init() {
   gs_552 = CharToStr(108);
   gs_560 = CharToStr(iArrow);
   gs_112 = Symbol();
   if (myPeriod == 0) gi_196 = Period();
   else gi_196 = myPeriod;
   gs_176 = TimeFrameToString(gi_196);
   gs_168 = Symbol();
   gi_192 = Digits;
   gd_216 = Point;
   gs_292 = "SCALP TRADE";
   gi_unused_200 = 0;
   if (gi_192 == 5 || gi_192 == 3) {
      gi_unused_204 = 0;
      gd_216 = 10.0 * gd_216;
   } else gi_unused_204 = 0;
   setUpStrings(gsa_308, g_arr_size_300, gs_112);
   if (IsMini()) gs_unused_320 = "m";
   if (IsDoubleDotted()) gs_unused_320 = "..";
   else
      if (IsDotted()) gs_unused_320 = ".";
   g_str_len_304 = StringLen(gs_292);
   IndicatorShortName(gs_292);
   gs_184 = gs_292;
   if (g_corner_96 == 0 || g_corner_96 == 2) {
      gi_516 = 0;
      gi_520 = 0;
      gi_524 = 70;
      gi_528 = 110;
      gi_532 = 80;
      gi_unused_536 = 90;
      gi_unused_540 = 90;
   } else {
      gi_516 = 0;
      gi_520 = 130;
      gi_524 = 90;
      gi_528 = 50;
      gi_532 = 10;
      gi_unused_536 = 0;
      gi_unused_540 = 0;
      gi_unused_544 = 0;
      gi_unused_548 = 0;
   }
   deinit();
   return (0);
}

void ObDeleteObjectsByPrefix(string as_0) {
   string l_name_8;
   int l_str_len_16 = StringLen(as_0);
   int li_20 = 0;
   while (li_20 < ObjectsTotal()) {
      l_name_8 = ObjectName(li_20);
      if (StringSubstr(l_name_8, 0, l_str_len_16) != as_0) {
         li_20++;
         continue;
      }
      ObjectDelete(l_name_8);
   }
}

int deinit() {
   ObDeleteObjectsByPrefix(gs_184);
   TRO();
   return (0);
}

int start() {
   gi_208 = 10;
   g_index_212 = 0;
   gsa_232[g_index_212] = gs_184 + g_index_212;
   gsa_236[g_index_212] = "   SCALP TRADE ";
   DoShowHD(g_index_212, colorHD);
   string l_symbol_0 = gs_112;
   gi_192 = MarketInfo(l_symbol_0, MODE_DIGITS);
   gd_216 = MarketInfo(l_symbol_0, MODE_POINT);
   g_spread_224 = MarketInfo(l_symbol_0, MODE_SPREAD);
   gd_600 = g_spread_224 * gd_216;
   if (gi_192 == 5 || gi_192 == 3) {
      gi_192--;
      gd_216 = 10.0 * gd_216;
   }
   DoWork(l_symbol_0, gi_196);
   g_index_212++;
   gsa_232[g_index_212] = gs_184 + g_index_212;
   gsa_236[g_index_212] = " ";
   DoShow(g_index_212, colorHD);
   g_index_212++;
   gsa_232[g_index_212] = gs_184 + g_index_212;
   gsa_236[g_index_212] = "3 BOX CHECK";
   DoShowHD(g_index_212, colorHD);
   g_index_212++;
   gsa_232[g_index_212] = gs_184 + g_index_212;
   gsa_236[g_index_212] = gs_352;
   DoShowHD(g_index_212, g_color_436);
   ObjectsRedraw();
   return (0);
}

void DoShowHD(int ai_0, color a_color_4) {
   ObjectCreate(gsa_232[ai_0], OBJ_LABEL, 0, Time[0], 0);
   ObjectSet(gsa_232[ai_0], OBJPROP_CORNER, g_corner_96);
   ObjectSet(gsa_232[ai_0], OBJPROP_XDISTANCE, gi_516 + myChartX);
   ObjectSet(gsa_232[ai_0], OBJPROP_YDISTANCE, gi_208 + myChartY);
   ObjectSetText(gsa_232[ai_0], gsa_236[ai_0], myFontSize, myFont, a_color_4);
   gi_208 += 20;
}

void DoShow(int ai_0, int ai_unused_4) {
   string l_name_8;
   ObjectCreate(gsa_232[ai_0], OBJ_LABEL, 0, Time[0], 0);
   ObjectSet(gsa_232[ai_0], OBJPROP_CORNER, g_corner_96);
   ObjectSet(gsa_232[ai_0], OBJPROP_XDISTANCE, gi_520 + myChartX);
   ObjectSet(gsa_232[ai_0], OBJPROP_YDISTANCE, gi_208 + myChartY);
   ObjectSetText(gsa_232[ai_0], gsa_236[ai_0], myFontSize, myFont, g_color_424);
   if (ai_0 > 0) {
      l_name_8 = gsa_232[ai_0] + "ARROW";
      ObjectDelete(l_name_8);
      ObjectCreate(l_name_8, OBJ_LABEL, 0, Time[0], 0);
      ObjectSetText(l_name_8, g_text_400, 16, "WingDings", g_color_424);
      ObjectSet(l_name_8, OBJPROP_CORNER, g_corner_96);
      ObjectSet(l_name_8, OBJPROP_XDISTANCE, gi_524 + myChartX);
      ObjectSet(l_name_8, OBJPROP_YDISTANCE, gi_208 + myChartY);
      l_name_8 = gsa_232[ai_0] + " ARROWcharge";
      ObjectDelete(l_name_8);
      ObjectCreate(l_name_8, OBJ_LABEL, 0, Time[0], 0);
      ObjectSetText(l_name_8, g_text_416, 16, "WingDings", g_color_432);
      ObjectSet(l_name_8, OBJPROP_CORNER, g_corner_96);
      ObjectSet(l_name_8, OBJPROP_XDISTANCE, gi_528 + myChartX);
      ObjectSet(l_name_8, OBJPROP_YDISTANCE, gi_208 + myChartY);
      l_name_8 = gsa_232[ai_0] + "ARROWdet";
      ObjectDelete(l_name_8);
      ObjectCreate(l_name_8, OBJ_LABEL, 0, Time[0], 0);
      ObjectSetText(l_name_8, g_text_408, 16, "WingDings", g_color_428);
      ObjectSet(l_name_8, OBJPROP_CORNER, g_corner_96);
      ObjectSet(l_name_8, OBJPROP_XDISTANCE, gi_532 + myChartX);
      ObjectSet(l_name_8, OBJPROP_YDISTANCE, gi_208 + myChartY);
   }
   gi_208 += 20;
}

bool IsMini() {
   return (StringFind(Symbol(), "m") > -1);
}

bool IsDoubleDotted() {
   return (StringFind(Symbol(), "..") > -1);
}

bool IsDotted() {
   return (StringFind(Symbol(), ".") > -1);
}

string TimeFrameToString(int ai_0) {
   string ls_ret_4;
   switch (ai_0) {
   case 1:
      ls_ret_4 = "M1";
      break;
   case 5:
      ls_ret_4 = "M5";
      break;
   case 15:
      ls_ret_4 = "M15";
      break;
   case 30:
      ls_ret_4 = "M30";
      break;
   case 60:
      ls_ret_4 = "H1";
      break;
   case 240:
      ls_ret_4 = "H4";
      break;
   case 1440:
      ls_ret_4 = "D1";
      break;
   case 10080:
      ls_ret_4 = "W1";
      break;
   case 43200:
      ls_ret_4 = "MN";
   }
   return (ls_ret_4);
}

string StringUpperCase(string as_0) {
   int li_8;
   string ls_ret_12 = as_0;
   for (int li_20 = StringLen(as_0) - 1; li_20 >= 0; li_20--) {
      li_8 = StringGetChar(ls_ret_12, li_20);
      if ((li_8 > '`' && li_8 < '{') || (li_8 > 'ß' && li_8 < 256)) ls_ret_12 = StringSetChar(ls_ret_12, li_20, li_8 - 32);
      else
         if (li_8 > -33 && li_8 < 0) ls_ret_12 = StringSetChar(ls_ret_12, li_20, li_8 + 224);
   }
   return (ls_ret_12);
}

void setUpStrings(string &asa_0[], int &a_arr_size_4, string as_8) {
   string ls_16;
   as_8 = StringUpperCase(StringTrimLeft(StringTrimRight(as_8)));
   if (StringSubstr(as_8, StringLen(as_8) - 1, 1) != ";") as_8 = StringConcatenate(as_8, ";");
   int li_24 = 0;
   for (int li_28 = StringFind(as_8, ";", li_24); li_28 > 0; li_28 = StringFind(as_8, ";", li_24)) {
      ls_16 = StringSubstr(as_8, li_24, li_28 - li_24);
      ArrayResize(asa_0, ArraySize(asa_0) + 1);
      asa_0[ArraySize(asa_0) - 1] = ls_16;
      li_24 = li_28 + 1;
   }
   a_arr_size_4 = ArraySize(asa_0);
}

void DoWork(string a_symbol_0, int a_timeframe_8) {
   gd_592 = myThreshold * gd_216;
   g_ihigh_584 = iHigh(a_symbol_0, PERIOD_D1, 0);
   g_ilow_576 = iLow(a_symbol_0, PERIOD_D1, 0);
   g_iclose_568 = iClose(a_symbol_0, a_timeframe_8, 0);
   g_ihigh_464 = iHigh(a_symbol_0, a_timeframe_8, 0);
   g_ilow_472 = iLow(a_symbol_0, a_timeframe_8, 0);
   g_text_400 = gs_560;
   if (g_ilow_472 <= g_ilow_576 + gd_592) {
      g_color_424 = colorBUY;
      gi_unused_620 = TRUE;
   } else {
      if (g_ihigh_464 >= g_ihigh_584 - gd_592) {
         g_color_424 = colorSHORT;
         gi_unused_620 = TRUE;
      } else g_color_424 = colorWAIT;
   }
   g_iopen_488 = iOpen(a_symbol_0, a_timeframe_8, 1);
   g_iclose_480 = iClose(a_symbol_0, a_timeframe_8, 1);
   g_ihigh_496 = iHigh(a_symbol_0, a_timeframe_8, 1);
   g_text_416 = gs_560;
   if (g_iclose_480 > g_iopen_488) {
      g_color_432 = colorBUY;
      gi_unused_624 = TRUE;
   } else {
      if (g_iclose_480 < g_iopen_488) {
         g_color_432 = colorSHORT;
         gi_unused_624 = TRUE;
      } else g_color_432 = colorWAIT;
   }
   g_text_408 = gs_560;
   if (g_iclose_568 >= g_ihigh_496 && g_iclose_568 <= g_ihigh_496 + gd_600) {
      gs_352 = "SCALP BUY NOW!   ";
      g_color_428 = colorBUY;
      gi_unused_628 = TRUE;
   } else {
      if (g_iclose_568 <= gd_504 && g_iclose_568 >= gd_504 + gd_600) {
         gs_352 = "SCALP SELL NOW!  ";
         g_color_428 = colorSHORT;
         gi_unused_628 = TRUE;
      } else g_color_428 = colorWAIT;
   }
   if (g_color_424 == g_color_432 && g_color_432 == g_color_428) {
      g_color_436 = g_color_424;
      if (gi_612 && g_time_608 != Time[0] && Sound.Alert) {
         g_time_608 = Time[0];
         PlaySound(Sound.File);
         gi_612 = FALSE;
         gi_unused_620 = FALSE;
         gi_unused_624 = FALSE;
         gi_unused_628 = FALSE;
      }
   } else {
      gi_612 = TRUE;
      g_color_436 = colorWAIT;
      gs_352 = "DO NOT TRADE";
   }
}

void TRO() {
   string l_name_0 = "TAG";
   ObjectCreate(l_name_0, OBJ_LABEL, 0, 0, 0);
   ObjectSetText(l_name_0, CharToStr(78), 2, "Wingdings", DimGray);
   ObjectSet(l_name_0, OBJPROP_CORNER, 3);
   ObjectSet(l_name_0, OBJPROP_XDISTANCE, 5);
   ObjectSet(l_name_0, OBJPROP_YDISTANCE, 5);
}
